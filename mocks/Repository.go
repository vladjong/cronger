// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	cronger "github.com/vladjong/cronger"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, in
func (_m *Repository) Add(ctx context.Context, in cronger.Job) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cronger.Job) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Jobs provides a mock function with given fields: ctx
func (_m *Repository) Jobs(ctx context.Context) ([]cronger.Job, error) {
	ret := _m.Called(ctx)

	var r0 []cronger.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]cronger.Job, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []cronger.Job); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cronger.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, tag
func (_m *Repository) Remove(ctx context.Context, tag string) error {
	ret := _m.Called(ctx, tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatusCancelled provides a mock function with given fields: ctx, ids, functionName
func (_m *Repository) SetStatusCancelled(ctx context.Context, ids []string, functionName string) ([]string, error) {
	ret := _m.Called(ctx, ids, functionName)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) ([]string, error)); ok {
		return rf(ctx, ids, functionName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) []string); ok {
		r0 = rf(ctx, ids, functionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, string) error); ok {
		r1 = rf(ctx, ids, functionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, tag, status
func (_m *Repository) UpdateStatus(ctx context.Context, tag string, status cronger.Status) error {
	ret := _m.Called(ctx, tag, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, cronger.Status) error); ok {
		r0 = rf(ctx, tag, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkingUpdateSuspend provides a mock function with given fields: ctx
func (_m *Repository) WorkingUpdateSuspend(ctx context.Context) ([]cronger.Job, error) {
	ret := _m.Called(ctx)

	var r0 []cronger.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]cronger.Job, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []cronger.Job); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cronger.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
